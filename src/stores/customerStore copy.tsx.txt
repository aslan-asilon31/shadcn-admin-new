// store.js  
import { create } from 'zustand';
import axios from 'axios';
import Swal from 'sweetalert2';


interface Customer {
  id: string;
  first_name: string;
  last_name: string;
  phone: string;
  email: string;
  created_by: string;
  updated_by: string;
  is_activated: number;
  created_at: string;
  updated_at: string;
}

interface Pagination {
  current_page: number;
  from: number;
  last_page: number;
  per_page: number;
  prev_page_url: string | null;
  to: number;
  total: number;
}

interface CustomerStore {
  customers: Customer[];
  fetchCustomers: (currentPage: number, perPage: number) => Promise<void>;
  error: any;
  loading: boolean ;
  pagination: Pagination;
}


const customerStore = create<CustomerStore>((set) => ({
  customers: [],  
  loading: false,  
  error: null,  
  pagination: {
    current_page: 1,
    from: 1,
    last_page: 1,
    per_page: 0,
    prev_page_url: null,
    to: 10,
    total: 0,
  },


  fetchCustomers: async (current_page :number = 1, per_page :number = 2) => {
    set({ loading: true, error: null }); 
    try {
      const response = await axios.get('http://localhost:8000/api/customers', {
        params: {
          per_page: 2, 
        },
      });

      set({
        customers: response.data.data.data, 
        pagination: {
          current_page: response.data.data.current_page, 
          from: response.data.data.from, 
          last_page: response.data.data.last_page, 
          per_page: response.data.data.per_page, 
          prev_page_url: response.data.data.per_page, 
          to: response.data.data.to, 
          total: response.data.data.total, 
        },
        loading: false,
      });
      
    } catch (err) {
      set({ error: err.message, loading: false });
    }
  },

  
  setItemsPerPage: async (perPage: any) => {
    await set((state) => ({
      pagination: {
        ...state.pagination,
        per_page: perPage, // Update per_page
      },
    }));
    await fetchCustomers(1, perPage); // Ambil data dengan per_page yang baru
  },



  // setPage: (page) => {
  //   set((state) => {
  //     if (page === state.pagination.last_page) {
  //       Swal.fire({
  //         title: 'Warning!',
  //         text: 'You are about to navigate to the last page.',
  //         icon: 'warning',
  //         showCancelButton: true,
  //         confirmButtonText: 'Yes, go to last page',
  //         cancelButtonText: 'Cancel',
  //       }).then((result) => {
  //         if (result.isConfirmed) {
  //           // If confirmed, fetch customers for the last page
  //           state.fetchCustomers(page, state.pagination.per_page);
  //         }
  //       });
  //     } else {
  //       // If not the last page, just fetch the customers
  //       state.fetchCustomers(page, state.pagination.per_page);
  //     }
  //   });
  // },


  
}));  
  
export default customerStore;  

function fetchCustomers(arg0: number, perPage: any) {
  throw new Error('Function not implemented.');
}

